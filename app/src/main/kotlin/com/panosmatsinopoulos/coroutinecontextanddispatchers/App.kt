/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.panosmatsinopoulos.coroutinecontextanddispatchers

import kotlinx.coroutines.CoroutineName
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking

fun main() {
    println("Main ${Thread.currentThread().name}")
    runBlocking {
        val request = launch {
            repeat(3) {
                launch(CoroutineName("Foo$it")) {
                    delay((it + 1) * 500L)
                    println("Coroutine $it, thread: ${Thread.currentThread().name}")
                }
            }
            // A parent coroutine may end before its children do.
            println("request: I am done and I don't have to explicitly join my children who are still active.")
        }
        request.join()
        println("Processing of the request is complete")
    }
    println("Main ending")
}
